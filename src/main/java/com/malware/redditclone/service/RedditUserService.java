package com.malware.redditclone.service;

import java.util.List;
import java.util.Optional;

import com.malware.redditclone.domain.Link;
import com.malware.redditclone.domain.RedditUser;
import com.malware.redditclone.repositories.RedditUserRepository;

import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;


@Service
@Transactional(readOnly = true)
public class RedditUserService {

    private final RedditUserRepository redditUserRepo;

    public RedditUserService(RedditUserRepository redditUserRepo) {
        this.redditUserRepo = redditUserRepo;
    }

    @Transactional(readOnly = false)
    public RedditUser register(RedditUser user) {
        return null;
    }


    public Optional<RedditUser> findById(Long id) {
        return redditUserRepo.findById(id);
    }

    public RedditUser getById(Long id) {
        return this.findById(id).orElse(null);
    }

    public RedditUser getByUsername(String username) {
        return redditUserRepo.findByUsername(username).orElse(null);
    }

    public RedditUser getActiveUser() {
        return this.getByUsername(((RedditUser) SecurityContextHolder.getContext().getAuthentication().getPrincipal()).getUsername());
    }

    public Optional<RedditUser> findByUsername(String username) {
        return redditUserRepo.findByUsername(username);
    }

    @Transactional(readOnly = false)
    public void save(RedditUser user) {
        redditUserRepo.save(user);
    }

    public List<Link> getLinks(String username) {
        RedditUser user = redditUserRepo.findByUsername(username).get();
        List<Link> links = user.getLinks();
        return links;
    }
}
