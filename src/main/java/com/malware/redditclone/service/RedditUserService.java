package com.malware.redditclone.service;

import java.util.List;
import java.util.Optional;
import java.util.UUID;

import com.malware.redditclone.domain.Link;
import com.malware.redditclone.domain.RedditUser;
import com.malware.redditclone.repositories.RedditUserRepository;

import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;


@Service
@Transactional(readOnly = true)
public class RedditUserService {

    private final RedditUserRepository redditUserRepo;
    private RoleService roleService;
    private BCryptPasswordEncoder encoder;
    private MailService mailService;

    public RedditUserService(RedditUserRepository redditUserRepo, RoleService roleService, MailService mailService) {
        this.redditUserRepo = redditUserRepo;
        this.roleService = roleService;
        encoder = new BCryptPasswordEncoder();
        this.mailService = mailService;
    }

    @Transactional(readOnly = false)
    public RedditUser register(RedditUser user) {
        String secret = "{bcrypt}" + encoder.encode(user.getPassword());
        user.setEnabled(false);
        user.setPassword(secret);
        user.setConfirmPassword(secret);
        user.setActivationCode(UUID.randomUUID().toString());
        user.AddRole(roleService.findByName("ROLE_USER"));
        save(user);
        sendActivationEmail(user);
        return user;
    }


    public Optional<RedditUser> findById(Long id) {
        return redditUserRepo.findById(id);
    }

    public Optional<RedditUser> findByEmailAndActivationCode(String email, String activationCode) {
        return redditUserRepo.findByEmailAndActivationCode(email, activationCode);
    }

    public RedditUser getById(Long id) {
        return this.findById(id).orElse(null);
    }

    public RedditUser getByUsername(String username) {
        return redditUserRepo.findByUsername(username).orElse(null);
    }

    public RedditUser getActiveUser() {
        try {
            return this.getByUsername(((RedditUser) SecurityContextHolder.getContext().getAuthentication().getPrincipal()).getUsername());

        } catch (Exception e) {
            //TODO: handle exception
            return null;
        }
    }

    public Optional<RedditUser> findByUsername(String username) {
        return redditUserRepo.findByUsername(username);
    }

    @Transactional(readOnly = false)
    public void save(RedditUser user) {
        redditUserRepo.save(user);
    }

    public List<Link> getLinks(String username) {
        RedditUser user = redditUserRepo.findByUsername(username).get();
        List<Link> links = user.getLinks();
        return links;
    }

    public void sendActivationEmail(RedditUser user) {
        mailService.sendActivationEmail(user);
    }

    public void sendWelcomeEmail(RedditUser user) {
        mailService.sendWelcomeEmail(user);
    }
}
