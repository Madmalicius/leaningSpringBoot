package com.malware.redditclone.controller;

import java.util.Optional;

import javax.validation.Valid;

import com.malware.redditclone.domain.RedditUser;
import com.malware.redditclone.service.RedditUserService;
import com.malware.redditclone.validation.PasswordValidator;

import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

@Controller
public class AuthController {

    private RedditUserService userService;
    private PasswordValidator passwordValidator;

    public AuthController(RedditUserService userService, PasswordValidator passwordValidator) {
        this.userService = userService;
        this.passwordValidator = passwordValidator;
    }

    @InitBinder("redditUser")
    public void initBinderRedditUser(WebDataBinder binder) {
        binder.addValidators(passwordValidator);
    }

    @GetMapping("/login")
    public String login(){
        return "auth/login";
    }

    @GetMapping("/register")
    public String register(Model model){
        model.addAttribute("redditUser", new RedditUser());
        return "auth/register";
    }

    @PostMapping("/register")
    public String registerNewUser(@ModelAttribute("redditUser") @Valid RedditUser user, BindingResult bindingResult, Model model, RedirectAttributes redirectAttributes) {
        System.out.println(bindingResult.toString());
        if( bindingResult.hasErrors() ) {
            model
                .addAttribute("redditUser",user)
                .addAttribute("validationErrors", bindingResult.getAllErrors());
            return "auth/register";
        } else {
            RedditUser newUser = userService.register(user);
            redirectAttributes
                    .addAttribute("id", newUser.getId())
                    .addFlashAttribute("success",true);
            return "redirect:/register";
        }
    }

    @GetMapping("/profile")
    public String profile(Model model){
        System.out.println((RedditUser) SecurityContextHolder.getContext().getAuthentication().getPrincipal());
        if ((RedditUser) SecurityContextHolder.getContext().getAuthentication().getPrincipal() == null) {
            return "redirect:/";
        } else {
            RedditUser user = userService.getActiveUser();
            model.addAttribute("user", user);
            return "auth/profile";
        }
    }

    @GetMapping("/activate/{email}/{activationCode}")
    public String activateAccount(@PathVariable String email, @PathVariable String activationCode) {
        Optional<RedditUser> user = userService.findByEmailAndActivationCode(email, activationCode);

        if (user.isPresent()) {
            RedditUser presentUser = user.get();
            if ( !presentUser.isEnabled() ) {
                presentUser.setEnabled(true);
                presentUser.setConfirmPassword(presentUser.getPassword());
                userService.save(presentUser);
                userService.sendWelcomeEmail(presentUser);
            }
            return "auth/activated";
        } else return "redirect:/";
    }

}
