package com.malware.redditclone.controller;

import java.util.Optional;

import javax.validation.Valid;

import com.malware.redditclone.domain.Link;
import com.malware.redditclone.repositories.LinkRepository;

import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;
import org.springframework.web.bind.annotation.PathVariable;

@Controller
public class LinkController {

    private LinkRepository linkRepo;

    public LinkController(LinkRepository linkRepo) {
        this.linkRepo = linkRepo;
    }


    // list
    @GetMapping("/")
    public String list(Model model) {
        model.addAttribute("links", linkRepo.findAll(Sort.by(Sort.Direction.DESC, "voteCount")));
        System.out.println(linkRepo.findAll());
        return "link/index";
    }

    @GetMapping("/link/{id}")
    public String ViewPage(@PathVariable Long id, Model model) {
        Optional<Link> link = linkRepo.findById(id);
        if (link.isPresent()) {
            
            model.addAttribute("link", link.get());
            model.addAttribute("success", model.containsAttribute("success"));
            return "link/link"; 
        }
        else {return "redirect:/";}
    }

    @GetMapping("/link/submit")
    public String newLinkForm(Model model) {
        model.addAttribute("link", new Link());
        return "link/submit";
    }

    @PostMapping("/link/submit")
    public String createLink(@Valid Link link, BindingResult bindingResult, Model model, RedirectAttributes redirectAttributes) {
        if (bindingResult.hasErrors()){
            System.out.println("Validation error during submission of link");
            model.addAttribute("link", link);
        } else {
            linkRepo.save(link);
            redirectAttributes.addAttribute("id", link.getId()).addFlashAttribute("success", true);
            return "redirect:/link/{id}";
        }
        return "link/submit";
    }

    // CRUD

    @GetMapping("/foo")
    public String foo(Model model) {
        model.addAttribute("pageTitle", "Foo Bar");
        return "foo";
    }
}
